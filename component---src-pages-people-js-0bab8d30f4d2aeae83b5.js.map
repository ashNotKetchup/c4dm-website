{"version":3,"file":"component---src-pages-people-js-0bab8d30f4d2aeae83b5.js","mappings":"iMAqIA,UArGeA,IAAoB,IAAnB,YAACC,GAAYD,EAC3B,MACEE,YAAY,OAAEC,IACZF,EACIG,GAAOC,EAAAA,EAAAA,gBAAe,cAoCtB,EAACC,EAAc,EAACC,IAFXH,EAAKI,QAE0BC,EAAAA,EAAAA,UAASL,EAAKI,OAAOE,QAEzDC,GAAmBC,EAAAA,EAAAA,cACtBF,IACCH,EAAiBG,EAAM,GAEzB,CAACH,IAKH,OACEM,EAAAA,cAACC,EAAAA,EAAM,CAACC,KAAK,SAASZ,OAAQA,GAC5BU,EAAAA,cAAA,WAASG,UAAU,WACjBH,EAAAA,cAACI,EAAAA,EAAmB,CAClBC,KAAK,SACLC,gBAAgB,UAChBC,UAAU,QACVJ,UAAU,SAEZH,EAAAA,cAACQ,EAAAA,EAAW,CACRC,KAAMlB,EAAKmB,QACXb,MAAON,EAAKI,OAAOE,MACnBc,SAAUb,IAGXL,EAAcmB,KAAI,CAACC,EAAYC,KAE9B,IAAIC,EAOJ,OANc,IAAVD,GAAeD,EAAYG,YAAYC,OAASxB,EAAcqB,EAAM,GAAGE,YAAYC,OACrFF,EACAf,EAAAA,cAAA,WACEA,EAAAA,cAAA,KAAGG,UAAU,mBAAoBU,EAAYG,YAAYC,QAI7DjB,EAAAA,cAAAA,EAAAA,SAAA,KACGe,EACHf,EAAAA,cAACkB,EAAAA,KAAI,CAACC,GAAIN,EAAYG,YAAYI,KAChCpB,EAAAA,cAAA,OACEqB,MAAM,sCACNC,IAAKT,EAAYU,IAEnBvB,EAAAA,cAACwB,EAAAA,EAAS,CACNC,OA1GCC,EA0GkBb,EAAYG,YAAYU,MAzG7D1B,EAAAA,cAAAA,EAAAA,SAAA,KACG0B,EACC1B,EAAAA,cAAC2B,EAAAA,EAAW,CAACC,IAAI,oBAAoBF,MAAOA,EAAMG,gBAAgBC,kBAElE9B,EAAAA,cAAC+B,EAAAA,EAAW,CACVH,IAAI,8CACJI,IAAI,uCAAsCC,YAAAC,EAAA,UAoG9BC,QA9FEjC,EA8FmBW,EAAYG,YAAYd,KA9FrCkC,EA8F2CvB,EAAYG,YAAYoB,aA7F7EpC,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,KAAGG,UAAU,cAAcD,GAAQ,QACnCF,EAAAA,cAAA,KAAGG,UAAU,iBAAiBiC,GAAgB,uBA4F9CC,OAxFCC,EAwFkBzB,EAAYG,YAAYsB,MAxF/BtC,EAAAA,cAAA,KAAGG,UAAU,QAAQmC,GAAS,cAAc,YAAvDA,MAPCpC,EAAMkC,EAbPV,CAgHF,KAOJ,C","sources":["webpack://c4dm-website/./src/pages/people.js"],"sourcesContent":["import React, {useState, useCallback} from \"react\";\nimport { graphql, useStaticQuery, Link } from \"gatsby\";\nimport { GatsbyImage, StaticImage } from \"gatsby-plugin-image\";\nimport Layout from \"../components/layout\";\nimport ParallelogramHeader from \"../components/parallelogramHeader\";\nimport TableCard from \"../components/tableCard\";\nimport TagSelector from \"../components/tagSelector\";\nimport \"../style/bulmacustom.scss\"\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\n\nconst firstColumn = (image) => (\n  <>\n    {image ? (\n      <GatsbyImage alt=\"picture of person\" image={image.childImageSharp.gatsbyImageData} />\n    ) : (\n      <StaticImage\n        alt=\"default picture as no picture was specified\"\n        src=\"../content/people/defaultprofile.png\"\n      />\n    )}\n  </>\n);\n\nconst secondColumn = (name, acadposition) => (          \n                  <>\n                    <p className=\"title is-4\">{name || \"Name\"}</p>\n                    <p className=\"subtitle is-7\">{acadposition || \"Academic Position\"}</p>\n                  </>\n                );\n\nconst thirdColumn = (blurb) => (<p className=\"is-3\">{blurb || \"description\"}  </p>);\n\nconst People = ({pageContext}) => {\n  const {\n    breadcrumb: { crumbs },\n  } = pageContext\n    const data = useStaticQuery(graphql`\n      {people: allMarkdownRemark(\n          filter: { fields: { category: { eq: \"people\" } } }\n          sort: { frontmatter: { role: ASC } }\n        ) {\n          nodes {\n            frontmatter {\n              image {\n                childImageSharp {\n                  gatsbyImageData(layout: CONSTRAINED, aspectRatio: 1)\n                }\n              }\n              name\n              url\n              acadposition\n              blurb\n              themes\n              role\n            }\n            id\n          }\n        }\n        allTags: allMarkdownRemark(\n          limit: 20000\n          filter: { fields: { category: { eq: \"people\" } } }\n        ) {\n          group(field: { frontmatter: { role: SELECT } }) {\n            fieldValue\n            totalCount\n          }\n        }\n      }\n    `);\n\nconst groups = data.people;\n\n    const [filteredNodes, setFilteredNodes] = useState(data.people.nodes);\n\n    const getFilteredNodes = useCallback(\n      (nodes) => {\n        setFilteredNodes(nodes);\n      },\n      [setFilteredNodes]\n    );\n\n    // some of the students have no academic role, the markdown frontmatters need to be updated, removing role and putting them in academic position\n\n    return (\n      <Layout name=\"People\" crumbs={crumbs}>\n        <section className=\"section\">\n          <ParallelogramHeader\n            text=\"People\"\n            backgroundColor=\"primary\"\n            textColor=\"white\"\n            className=\"mb-6\"\n          />\n          <TagSelector\n              tags={data.allTags}\n              nodes={data.people.nodes}\n              callback={getFilteredNodes}\n            />\n\n            {filteredNodes.map((peopleentry,index) => {\n\n              let heading;\n              if (index === 0 || peopleentry.frontmatter.role !== filteredNodes[index-1].frontmatter.role) {\n                heading = \n                <div>\n                  <p className=\"title is-4 pt-5\" >{peopleentry.frontmatter.role}</p>\n                </div>;\n              }\n              return (\n              <>\n                {heading}\n              <Link to={peopleentry.frontmatter.url}>\n                <div\n                  class=\"card-image row is-three-fifths pt-3\"\n                  key={peopleentry.id}\n                >\n                <TableCard \n                    first={firstColumn(peopleentry.frontmatter.image)} \n                    second={secondColumn(peopleentry.frontmatter.name, peopleentry.frontmatter.acadposition)} \n                    third={thirdColumn(peopleentry.frontmatter.blurb)} \n                />\n                </div>\n                </Link>\n                </>\n              )\n              }\n              )\n              }\n\n        </section>\n      </Layout>\n    );\n}\n\nexport default People;"],"names":["_ref","pageContext","breadcrumb","crumbs","data","useStaticQuery","filteredNodes","setFilteredNodes","people","useState","nodes","getFilteredNodes","useCallback","React","Layout","name","className","ParallelogramHeader","text","backgroundColor","textColor","TagSelector","tags","allTags","callback","map","peopleentry","index","heading","frontmatter","role","Link","to","url","class","key","id","TableCard","first","image","GatsbyImage","alt","childImageSharp","gatsbyImageData","StaticImage","src","__imageData","require","second","acadposition","third","blurb"],"sourceRoot":""}