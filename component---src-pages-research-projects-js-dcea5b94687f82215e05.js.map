{"version":3,"file":"component---src-pages-research-projects-js-dcea5b94687f82215e05.js","mappings":"kMAWA,MAAMA,EAAqBC,GACzBC,EAAAA,cAACC,EAAAA,KAAI,CAACC,GAAIH,EAAaI,YAAYC,MACjCJ,EAAAA,cAAA,OAAKK,UAAU,sCAAsCC,IAAKP,EAAaQ,IACrEP,EAAAA,cAACQ,EAAAA,EAAS,CACRC,MAAOC,EACLX,EAAaI,YAAYQ,MAAMC,gBAAgBC,iBAEjDC,OAAQC,EACNhB,EAAaI,YAAYa,MACzBjB,EAAaI,YAAYc,OACzBlB,EAAaI,YAAYe,MACzBnB,EAAaI,YAAYgB,IACzBpB,EAAaI,YAAYiB,MACzBrB,EAAaI,YAAYkB,OACzBtB,EAAaI,YAAYC,UAQ7BkB,EAAoBC,IACxB,MAAMC,EAAS,GACTC,EAAY,GAGlB,OAFAF,EAASG,SAASC,IAA4C,WAA/BA,EAAQxB,YAAYyB,OAAsBJ,EAAOK,KAAK/B,EAAkB6B,IAAYF,EAAUI,KAAK/B,EAAkB6B,GAAS,IAEtJ,CAACH,SAAOC,YAAU,EAIrBf,EAAeC,GACnBX,EAAAA,cAAAA,EAAAA,SAAA,KACGW,EACCX,EAAAA,cAAC8B,EAAAA,EAAW,CAACC,IAAI,qBAAqBpB,MAAOA,IAE7CX,EAAAA,cAACgC,EAAAA,EAAW,CACVD,IAAI,0DACJE,IAAI,mCAAkCC,YAAAC,EAAA,SAMxCpB,EAAeA,CAACC,EAAOC,EAAQC,EAAOC,EAAKC,EAAOC,EAAQjB,IAClDJ,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,KAAGK,UAAU,cAAcW,GAAS,OAAO,KAC3ChB,EAAAA,cAAA,KAAGK,UAAU,QAAQY,EAAO,MAC5BjB,EAAAA,cAAA,SAAIoB,IAwFpB,UApFgBgB,IAAoB,IAAnB,YAACC,GAAYD,EACxB,MACEE,YAAY,OAAEC,IACZF,EAEEG,GAAOC,EAAAA,EAAAA,gBAAe,eAuCxB,EAACC,EAAiB,EAACC,IAAuBC,EAAAA,EAAAA,UAAStB,EAAiBkB,EAAKjB,SAASsB,QAElFC,GAAmBC,EAAAA,EAAAA,cAAaF,IACpCF,EAAoBrB,EAAiBuB,GAAO,GAC3C,CAACF,IAEJ,OACE3C,EAAAA,cAACgD,EAAAA,EAAM,CAACC,KAAK,UAAUV,OAAQA,GAC7BvC,EAAAA,cAAA,WAASK,UAAU,WACjBL,EAAAA,cAACkD,EAAAA,EAAmB,CAClBC,KAAK,oBACLC,gBAAgB,UAChBC,UAAU,QACVhD,UAAU,SAEZL,EAAAA,cAACsD,EAAAA,EAAW,CACVC,KAAMf,EAAKgB,QACXX,MAAOL,EAAKjB,SAASsB,MACrBY,SAAUX,IAEXJ,EAAiBlB,OAAOkC,OACvB1D,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,OAAKK,UAAU,iBACfL,EAAAA,cAAA,MAAIK,UAAU,YAAW,uBACxBqC,EAAiBlB,aAElBmC,EAEHjB,EAAiBjB,UAAUiC,OAC1B1D,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,OAAKK,UAAU,iBACfL,EAAAA,cAAA,MAAIK,UAAU,YAAW,0BACxBqC,EAAiBjB,gBACZkC,GAGL,C","sources":["webpack://c4dm-website/./src/pages/research/projects.js"],"sourcesContent":["import React, {useState, useCallback} from \"react\";\nimport { graphql, Link, useStaticQuery } from \"gatsby\";\nimport { GatsbyImage, StaticImage } from \"gatsby-plugin-image\";\nimport Layout from \"../../components/layout\";\nimport TableCard from \"../../components/tableCard\";\nimport TagSelector from \"../../components/tagSelector\";\nimport ParallelogramHeader from \"../../components/parallelogramHeader\";\nimport \"../../style/bulmacustom.scss\"\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\n\n// Create project card\nconst createProjectCard = (projectentry) => (\n  <Link to={projectentry.frontmatter.link}>\n    <div className=\"card-image row is-three-fifths pt-3\" key={projectentry.id}>\n      <TableCard\n        first={firstColumn(\n          projectentry.frontmatter.image.childImageSharp.gatsbyImageData\n        )}\n        second={secondColumn(\n          projectentry.frontmatter.title,\n          projectentry.frontmatter.author,\n          projectentry.frontmatter.begin,\n          projectentry.frontmatter.end,\n          projectentry.frontmatter.grant,\n          projectentry.frontmatter.amount,\n          projectentry.frontmatter.link\n        )}\n      />\n    </div>\n  </Link>\n);\n\n// Separate active and completed projects\nconst separateProjects = (projects) => {\n  const active = [];\n  const completed = [];\n  projects.forEach((project) => {project.frontmatter.status === \"active\" ? active.push(createProjectCard(project)) : completed.push(createProjectCard(project))});\n\n  return {active,completed};\n}\n\n// Return structured content for table card\nconst firstColumn = (image) => (\n  <>\n    {image ? (\n      <GatsbyImage alt=\"picture of project\" image={image} />\n    ) : (\n      <StaticImage\n        alt=\"default event picture as no event picture was specified\"\n        src=\"../../../static/defaultevent.png\"\n      />\n    )}\n  </>\n);\n\nconst secondColumn = (title, author, begin, end, grant, amount, link) => (\n              <>\n                <p className=\"title is-6\">{title || \"Name\"} </p>\n                <p className=\"is-3\">{author}  </p>\n                <p>{grant}</p>  \n              </>\n            );\n\nconst Project = ({pageContext}) => {\n      const {\n        breadcrumb: { crumbs },\n      } = pageContext;\n\n      const data = useStaticQuery(graphql`\n      {\n        projects: allMarkdownRemark(\n          filter: { fields: { category: { eq: \"projects\" } }}\n          sort: { frontmatter: { end: DESC } }\n        ) {\n          nodes {\n            frontmatter {\n              image {\n                childImageSharp {\n                  gatsbyImageData(layout: CONSTRAINED)\n                }\n              }\n              status\n              tags\n              title\n              author\n              begin\n              end\n              grant\n              amount\n              link\n            }\n            id\n          }\n        }\n\n        allTags: allMarkdownRemark(\n          limit: 2000\n          filter: { fields: { category: { eq: \"projects\" } }}\n          ) {\n          group(field: { frontmatter: { tags: SELECT }}) {\n            fieldValue\n            totalCount\n          }\n        }\n      }\n    `);\n\n    const [filteredProjects, setFilteredProjects] = useState(separateProjects(data.projects.nodes));\n\n    const getFilteredNodes = useCallback((nodes) => {\n      setFilteredProjects(separateProjects(nodes));\n    }, [setFilteredProjects]);\n\n    return (\n      <Layout name=\"Project\" crumbs={crumbs}>\n        <section className=\"section\">\n          <ParallelogramHeader\n            text=\"Research Projects\"\n            backgroundColor=\"primary\"\n            textColor=\"white\"\n            className=\"mb-6\"\n          />\n          <TagSelector\n            tags={data.allTags}\n            nodes={data.projects.nodes}\n            callback={getFilteredNodes}\n          />\n          {filteredProjects.active.length ? (\n            <>\n              <div className=\"lowerPadding\"></div>\n              <h2 className=\"subtitle\">All Active Projects</h2>\n              {filteredProjects.active}\n            </>\n          ) : undefined}\n\n          {filteredProjects.completed.length ? (\n            <>\n              <div className=\"lowerPadding\"></div>\n              <h2 className=\"subtitle\">All Completed Projects</h2>\n              {filteredProjects.completed}\n            </> ) : undefined}\n            \n        </section>\n      </Layout>\n    );\n}\n\nexport default Project;"],"names":["createProjectCard","projectentry","React","Link","to","frontmatter","link","className","key","id","TableCard","first","firstColumn","image","childImageSharp","gatsbyImageData","second","secondColumn","title","author","begin","end","grant","amount","separateProjects","projects","active","completed","forEach","project","status","push","GatsbyImage","alt","StaticImage","src","__imageData","require","_ref","pageContext","breadcrumb","crumbs","data","useStaticQuery","filteredProjects","setFilteredProjects","useState","nodes","getFilteredNodes","useCallback","Layout","name","ParallelogramHeader","text","backgroundColor","textColor","TagSelector","tags","allTags","callback","length","undefined"],"sourceRoot":""}